// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type arpEvent struct {
	SenderHWvalue    [6]uint8
	SenderProtoValue [4]uint8
	_                [2]byte
	OpCode           uint32
}

// loadArp returns the embedded CollectionSpec for arp.
func loadArp() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_ArpBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load arp: %w", err)
	}

	return spec, err
}

// loadArpObjects loads arp and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*arpObjects
//	*arpPrograms
//	*arpMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadArpObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadArp()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// arpSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type arpSpecs struct {
	arpProgramSpecs
	arpMapSpecs
}

// arpSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type arpProgramSpecs struct {
	ArpReflect *ebpf.ProgramSpec `ebpf:"arpReflect"`
}

// arpMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type arpMapSpecs struct {
	Events *ebpf.MapSpec `ebpf:"events"`
}

// arpObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadArpObjects or ebpf.CollectionSpec.LoadAndAssign.
type arpObjects struct {
	arpPrograms
	arpMaps
}

func (o *arpObjects) Close() error {
	return _ArpClose(
		&o.arpPrograms,
		&o.arpMaps,
	)
}

// arpMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadArpObjects or ebpf.CollectionSpec.LoadAndAssign.
type arpMaps struct {
	Events *ebpf.Map `ebpf:"events"`
}

func (m *arpMaps) Close() error {
	return _ArpClose(
		m.Events,
	)
}

// arpPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadArpObjects or ebpf.CollectionSpec.LoadAndAssign.
type arpPrograms struct {
	ArpReflect *ebpf.Program `ebpf:"arpReflect"`
}

func (p *arpPrograms) Close() error {
	return _ArpClose(
		p.ArpReflect,
	)
}

func _ArpClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed arp_bpfeb.o
var _ArpBytes []byte
